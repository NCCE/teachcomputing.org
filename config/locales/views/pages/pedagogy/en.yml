en:
  pages:
    pedagogy:
      asides:
        quick_reads:
          title: "Pedagogy Quick Reads"
          text: "These short monthly documents present a summary of a topic, the key points and considerations, as well as links to the original sources."
          button_text: "See all quick reads"
        research_bytes:
          title: "Research Bytes Newsletter"
          text: "Our half-termly newsletter provides a bite-sized summary of computing education research, insights from classroom teachers, as well as suggested reading."
          button_text: "Read the latest issue"
          link_1: "See past articles"
          link_2: "Receive Research Bytes by email"
          link_2_extra: "(requires a Teach Computing account)"
        pedagogy_reports:
          title: "Pedagogy Reports"
          text: "Our teaching and learning reports take a deep dive into progression and pedagogy with the computing curriculum."
          link_1: "See our impact"
        pedagogy_courses:
          title: "Pedagogy Focused Courses"
          text: "We offer a number of courses that specifically focus on exploring and developing effective pedagogical practices within computing."
          link_1: "View courses"
        podcast:
          title: "Teach Computing Podcast"
          text: "For 12 episodes our podcast examined different questions,
            challenges or practice relating to computing education through conversations with classroom teachers and other experts."
          link_1: "Listen to all 12 episodes"
      how_to_teach_computing:
        lead_with_concepts:
          title: "Lead with concepts"
          text: "Support pupils in the acquisition of knowledge,
            through the use of key concepts, terms, and vocabulary,
            providing opportunities to build a shared and consistent understanding.
            Glossaries, concept maps, and displays, along with regular recall and revision,
            can support this approach."
          link_1: 'Concept maps'
          link_2: 'What is computing?'
        work_together:
          title: "Work together"
          text:
            "Encourage collaboration, specifically using pair programming and peer instruction,
            and also structured group tasks. Working together stimulates classroom dialogue,
            articulation of concepts, and development of shared understanding"
          link_1: 'Pair Programming'
          link_2: 'Peer Instruction'
        hands_on:
          title: "Get hands-on"
          text:
            "Use physical computing and making activities that offer tactile and sensory experiences to enhance learning.
            Combining electronics and programming with arts and crafts (especially through exploratory projects) provides pupils with a creative,
            engaging context to explore and apply computing concepts."
          link_1: "Physical computing"
        unplug:
          title: "Unplug, unpack, repack"
          text: "Teach new concepts by first unpacking complex terms and ideas,
            exploring these ideas in unplugged and familiar contexts, then repacking this new understanding into the original concept.
            This approach (semantic waves) can help pupils develop a secure understanding of complex concepts."
          link_1: "Semantic Waves"
        model_everything:
          title: "Model everything"
          text:
            "Model processes or practices — everything from debugging code to binary number conversions — using techniques such as worked examples and live coding.
            Modelling is particularly beneficial to novices, providing scaffolding that can be gradually taken away."
          link_1: "Worked Examples"
          link_2: "Live Coding"
        comprehension:
          title: "Foster program comprehension"
          text:
            "Use a variety of activities to consolidate knowledge and understanding of the function and structure of programs,
            including debugging, tracing, and Parson's Problems. Regular comprehension activities will help secure understanding and build connections with new knowledge."
          link_1: "Program Comprehension"
        create_projects:
          title: "Create projects"
          text:
            "Use project-based learning activities to provide pupils with the opportunity to apply and consolidate their knowledge and understanding.
            Design is an important, often overlooked aspect of computing.
            Pupils can consider how to develop an artefact for a particular user or function,
            and evaluate it against a set of criteria."
          link_1: "Project based learning"
        add_variety:
          title: "Add variety"
          text:
            "Provide activities with different levels of direction, scaffolding,
            and support that promote learning, ranging from highly structured to more exploratory tasks.
            Adapting your instruction to suit different objectives will help keep all pupils engaged and encourage greater independence."
          link_1: "Variety within teaching and assessment"
        misconceptions:
          title: "Challenge misconceptions"
          text:
            "Use formative questioning to uncover misconceptions and adapt teaching to address them as they occur.
            Awareness of common misconceptions alongside discussion, concept mapping, peer instruction,
            or simple quizzes can help identify areas of confusion."
          link_1: "Addressing learners' alternate conceptions"
          link_2: "Peer Instruction"
        concrete:
          title: "Make concrete"
          text:
            "Bring abstract concepts to life with realworld, contextual examples and a focus on interdependencies with other curriculum subjects.
            This can be achieved through the use of unplugged activities, proposing analogies,
            storytelling around concepts, and finding examples of the concepts in pupils' lives."
          link_1: "Culturally relevant pedagogy"
        structure:
          title: "Structure lessons"
          text:
            "Use supportive frameworks when planning lessons, such as PRIMM (Predict, Run, Investigate, Modify, Make) and Use-Modify-Create.
            These frameworks are based on research and ensure that differentiation can be built in at various stages of the lesson."
          link_1: "PRIMM"
          link_2: "The PRIMM approach"
        read_and_explore:
          title: "Read and explore code first"
          text:
            "When teaching programming, focus first on code 'reading' activities, before code writing.
            With both block-based and text-based programming, encourage pupils to review and interpret blocks of code.
            Research has shown that being able to read, trace, and explain code augments pupils' ability to write code."
          resource_links:
          link_1: "Code Tracing"
          link_2: "PRIMM"
